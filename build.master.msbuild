<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Build_Master_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuildMaster>true</ExistsBuildMaster>
        
        <!-- The full path to the settings file that contains all the settings for the build process -->
        <BuildPropertyFile Condition=" '$(BuildPropertyFile)' == '' ">UNDEFINED</BuildPropertyFile>
    </PropertyGroup>

    <Import Project="$(BuildPropertyFile)"
            Condition="Exists('$(BuildPropertyFile)') AND '$(ExistsSettings)' != 'true' " />
    
    <PropertyGroup>
        <!-- Build flags -->
        <ShouldDisplayDebugLog Condition=" '$(ShouldDisplayDebugLog)' == '' ">false</ShouldDisplayDebugLog>
        <ShouldExecute Condition=" '$(ShouldExecute)' == '' ">true</ShouldExecute>
        
        <!-- Directories -->
        <DirWorkspace Condition=" '$(DirWorkspace)' == '' ">$([System.IO.Path]::GetDirectoryName('$(BuildPropertyFile)'))</DirWorkspace>
        <DirBuild Condition=" '$(DirBuild)' == '' ">$(DirWorkspace)\build</DirBuild>
        <DirBuildLogs Condition=" '$(DirBuildLogs)' == '' ">$(DirBuild)\logs</DirBuildLogs>
        <DirBuildTemp Condition=" '$(DirBuildTemp)' == '' ">$(DirBuild)\temp</DirBuildTemp>
        <DirBuildTempSetup>$(DirBuildTemp)\setup\master</DirBuildTempSetup>
        <DirBuildTempSetupCookbooks>$(DirBuildTempSetup)\cookbooks\jenkinsmaster</DirBuildTempSetupCookbooks>
       
        <DirConfig Condition=" '$(DirConfig)' == '' ">$(DirWorkspace)\config</DirConfig>
        <DirChefCookbooks Condition=" '$(DirChefCookbooks)' == '' ">$(DirWorkspace)\cookbooks</DirChefCookbooks>
        <DirScripts Condition=" '$(DirScripts)' == '' ">$(DirWorkspace)\scripts</DirScripts>
        <DirScriptsAzure Condition=" '$(DirScriptsAzure)' == '' ">$(DirScripts)\azure</DirScriptsAzure>
        <DirTemplates Condition=" '$(DirTemplates)' == '' ">$(DirWorkspace)\templates</DirTemplates>
        
        <!-- Azure configuration -->
        <AzureSubscriptionName Condition=" '$(AzureSubscriptionName)' == '' ">UNDEFINED</AzureSubscriptionName>
        <AzureServiceName Condition=" '$(AzureServiceName)' == '' ">UNDEFINED</AzureServiceName>
        <AzureStorageAccount Condition=" '$(AzureStorageAccount)' == '' ">UNDEFINED</AzureStorageAccount>

        <AzureSslCertificateName Condition=" '$(AzureSslCertificateName)' == '' AND '$(AzureServiceName)' != 'UNDEFINED' ">$(AzureServiceName).cloudapp.net</AzureSslCertificateName>
        <AzureSslCertificateName Condition=" '$(AzureSslCertificateName)' == '' ">UNDEFINED</AzureSslCertificateName>
        
        <!-- Virtual machine template configuration -->
        <TemplateAdminstratorName Condition=" '$(TemplateAdminstratorName)' == '' ">TheBigCheese</TemplateAdminstratorName>
        <TemplateAdminstratorPassword Condition=" '$(TemplateAdminstratorPassword)' == '' ">{E1BF62A1-24F4-49F4-A56F-1844868D26DC}</TemplateAdminstratorPassword>
        
        <!-- External tools -->
        <ToolsExternalPowershellPath Condition=" '$(ToolsExternalPowershellPath)' == '' ">C:\Windows\System32\WindowsPowerShell\v1.0</ToolsExternalPowershellPath>
        
        <!-- Files -->
        <FileSemanticVersion Condition=" '$(FileSemanticVersion)' == '' ">$(DirBuildTemp)\semantic_version.json</FileSemanticVersion>
        <FileJenkinsMasterConfigTemplate Condition=" '$(FileJenkinsMasterConfigTemplate)' == '' ">$(DirConfig)\jenkinsmaster.xml</FileJenkinsMasterConfigTemplate>
        <FileJenkinsMasterConfig Condition=" '$(FileJenkinsMasterConfig)' == '' ">$(DirBuildTemp)\jenkinsmaster.xml</FileJenkinsMasterConfig>
        <FileJenkinsMasterScript Condition=" '$(FileJenkinsMasterScript)' == '' ">$(DirScriptsAzure)\New-AzureWindowsImage.ps1</FileJenkinsMasterScript>
        <FileRemoteInstallerMain Condition=" '$(FileRemoteInstallerMain)' == '' ">$(DirScriptsAzure)\Install-ApplicationsOnWindowsWithChef.ps1</FileRemoteInstallerMain>
        <FileErrorRemoveImage Condition=" '$(FileErrorRemoveImage)' == '' ">$(DirWorkspace)\error.remove.image.msbuild</FileErrorRemoveImage>
        
        <!-- Version number -->
        <VersionSemantic>0</VersionSemantic>
    </PropertyGroup>
    
    <Import Project="$(DirMsBuildShared)\shared.templatetokens.msbuild" 
            Condition="Exists('$(DirMsBuildShared)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />
    
    <Import Project="$(DirMsBuildExtensions)\GetSemanticVersionFromFile.msbuild" 
            Condition="Exists('$(DirMsBuildExtensions)\GetSemanticVersionFromFile.msbuild') AND '$(ExistsExtensionsGetSemanticVersionFromFile)' != 'true' " />
    <Import Project="$(DirMsBuildExtensions)\TemplateFile.msbuild" 
            Condition="Exists('$(DirMsBuildExtensions)\TemplateFile.msbuild') AND '$(ExistsExtensionsTemplateFile)' != 'true' " />

    <Target Name="Build_Master_Run" DependsOnTargets="_Build_Master_DisplayInfo">
        <CallTarget Targets="_Build_Master_GetVersion" />
        <CallTarget Targets="_Build_Master_GatherInstallers" />
        <CallTarget Targets="_Build_Master_Build" />
    </Target>
    
    <Target Name="_Build_Master_DisplayInfo">
        <Message Text="Project directory structure:" />
        <Message Text="The workspace is located at:                                      $(DirWorkspace)" />
        <Message Text="The directory containing the build output is located at:          $(DirBuild)" />
        <Message Text="The directory containing the build logs is located at:            $(DirBuildLogs)" />
        <Message Text="The directory containing the temporary build files is located at: $(DirBuildTemp)" />
        <Message Text="The directory containing the installer files is located at:       $(DirBuildTempInstallers)" />
        <Message Text="The directory containing the configuration is located at:  $(DirConfig)" />
        <Message Text="The directory containing the installation scripts is located at:  $(DirScripts)" />
        <Message Text=" " />
        
        <Message Text="Jenkins master configuration template file is located at: $(FileJenkinsMasterConfigTemplate)" />
        <Message Text="Jenkins master configuration file is located at:          $(FileJenkinsMasterConfig)" />
        <Message Text="Jenkins master build script is located at:                $(FileJenkinsMasterScript)" />
        <Message Text=" " />
        
        <Message Text="Powershell command line executable is located at:         $(ToolsExternalPowershellPath)" />
        <Message Text=" " />
    </Target>
    
    <Target Name="_Build_Master_GetVersion" Condition="Exists('$(FileSemanticVersion)')">
        <GetSemanticVersionFromFile VersionFile="$(FileSemanticVersion)" 
                                    Condition="Exists('$(FileSemanticVersion)') AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersionFromFile>
        
        <Message Text="Version: $(VersionSemantic)" />
    </Target>
    
    <Target Name="_Build_Master_GatherInstallers">
        <MakeDir Directories="$(DirBuild)" 
                 Condition="!Exists('$(DirBuild)')" />
        <MakeDir Directories="$(DirBuildTemp)" 
                 Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildTempSetup)" 
                 Condition="!Exists('$(DirBuildTempSetup)')" />
        
        <!-- Download all required installers and ZIP archives -->
        <ItemGroup>
            <SetupFiles Include="$(FileRemoteInstallerMain)" />
        </ItemGroup>
        <Copy SourceFiles="@(SetupFiles)"
              DestinationFiles="@(SetupFiles->'$(DirBuildTempSetup)\%(RecursiveDir)%(Filename)%(Extension)')" />

        <ItemGroup>
            <CookBookFiles Include="$(DirChefCookbooks)\jenkinsmaster\**\*.*" />
        </ItemGroup>
        <Copy SourceFiles="@(CookBookFiles)"
              DestinationFiles="@(CookBookFiles->'$(DirBuildTempSetupCookbooks)\%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>

    <Target Name="_Build_Master_Build"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize">
        <ItemGroup>
            <TemplateTokens Include="SubscriptionName">
                <ReplacementValue>$(AzureSubscriptionName)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="SslCertificateName">
                <ReplacementValue>$(AzureSslCertificateName)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="ServiceName">
                <ReplacementValue>$(AzureServiceName)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="StorageAccount">
                <ReplacementValue>$(AzureStorageAccount)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="AdministratorName">
                <ReplacementValue>$(TemplateAdminstratorName)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="AdministratorPassword">
                <ReplacementValue>$(TemplateAdminstratorPassword)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="DirInstallers">
                <ReplacementValue>$(DirBuildTempSetup)</ReplacementValue>
            </TemplateTokens>
            <TemplateTokens Include="FileInstallerEntryPoint">
                <ReplacementValue>$(FileRemoteInstallerMain)</ReplacementValue>
            </TemplateTokens>
        </ItemGroup>
        
        <!-- Generate config file -->
        <TemplateFile Template="$(FileJenkinsMasterConfigTemplate)" 
                      OutputFileName="$(FileJenkinsMasterConfig)" 
                      Tokens="@(TemplateTokens)" 
                      Condition=" '$(ShouldExecute)' == 'true' "/>
    
        <!-- Make sure the whole thing stops if something goes wrong -->
        <CreateProperty Value="$ErrorActionPreference = &#39;Stop&#39; ">
            <Output TaskParameter="Value" PropertyName="CommandErrorActionPreference" />
        </CreateProperty>
        
        <!-- Import Azure -->
        <CreateProperty Value="Import-Module Azure">
            <Output TaskParameter="Value" PropertyName="CommandImportAzure" />
        </CreateProperty>
        
        <!-- Invoke the powershell script -->
        <CreateProperty Value="&amp; $(FileJenkinsMasterScript) -configFile &#39;$(FileJenkinsMasterConfig)&#39; -azureScriptDirectory &#39;$(DirScriptsAzure)&#39; -Verbose">
            <Output TaskParameter="Value" PropertyName="CommandInvokeScript" />
        </CreateProperty>
        
        <CreateProperty Value="$(CommandErrorActionPreference) &#059; $(CommandImportAzure) &#059; $(CommandInvokeScript)">
            <Output TaskParameter="Value" PropertyName="CommandAzureJenkinsMaster" />
        </CreateProperty>
        <Exec Command="&quot;$(ToolsExternalPowershellPath)\powershell.exe&quot; -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command &quot; $(CommandAzureJenkinsMaster) &quot;"
              LogStandardErrorAsError="true" />
        
        <!-- On Failure nuke the image -->
        <OnError ExecuteTargets="_Build_Master_RemoveImage" />
    </Target>
    
    <Target Name="_Build_Master_RemoveImage" >
        <MsBuild Projects="$(FileErrorRemoveImage)" Properties="FileJenkinsConfig=$(FileJenkinsMasterConfig);BuildPropertyFile=$(BuildPropertyFile)" />
    </Target>
</Project>